"""
Django settings for scope_site project.

Generated by 'django-admin startproject' using Django 3.0.5.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""

import os
import sys

# Add the apps folder to sys path, to allow app imports
sys.path.insert(0, os.path.abspath('apps'))

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/

PRODUCTION_ENV = not (len(sys.argv) >= 2 and sys.argv[1] == 'runserver')

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'wg=e1o&-az+jd9oq%8cs(2gqfjh@+wzvhl@k(v_3&ged8uc6l='

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*'] # might be insecure, just to make it work for now (should maybe be '*.herokuapp.com' in future)
#ALLOWED_HOSTS = [os.environ['WEBSITE_HOSTNAME']] if 'WEBSITE_HOSTNAME' in os.environ else []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'whitenoise.runserver_nostatic', # enable whitenoise for dev, to get same behaviour as production environment
    'django.contrib.staticfiles',

    # required by allauth
    'django.contrib.sites',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.github',

    # our apps
    'domain',
    'downloads',
    'users',
    'twitter_a',
    'sourcing_m',
    'sourcing_a',
    'extracting_m',
    'extracting_qa',
    'parsing_m',
    'parsing_qa',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware', # added this for whitenoise
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

AUTHENTICATION_BACKENDS = (
    'django.contrib.auth.backends.ModelBackend',
    'allauth.account.auth_backends.AuthenticationBackend',
)

ROOT_URLCONF = 'core.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            os.path.join(BASE_DIR, 'core'),
            os.path.join(BASE_DIR, 'apps', 'domain'),
            os.path.join(BASE_DIR, 'apps', 'download'),
            os.path.join(BASE_DIR, 'apps', 'users'),
            os.path.join(BASE_DIR, 'apps', 'users', 'templates', 'users'), # allows direct access to 'account' folder templates, for overriding allauth templates
            os.path.join(BASE_DIR, 'apps', 'twitter_a'),
            os.path.join(BASE_DIR, 'apps', 'sourcing_m'),
            os.path.join(BASE_DIR, 'apps', 'sourcing_a'),
            os.path.join(BASE_DIR, 'apps', 'extracting_m'),
            os.path.join(BASE_DIR, 'apps', 'extracting_qa'),
            os.path.join(BASE_DIR, 'apps', 'parsing_m'),
            os.path.join(BASE_DIR, 'apps', 'parsing_qa'),
            ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]
print(TEMPLATES[0]['DIRS'])

WSGI_APPLICATION = 'core.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'OPTIONS': {
            'read_default_file': os.path.join(BASE_DIR, 'db_config.cnf'),
        },
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/

STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage' # whitenoise specific
STATIC_ROOT = os.path.join(BASE_DIR, 'static')
STATIC_URL = '/static/'


# user model
AUTH_USER_MODEL = 'users.User'
#LOGIN_URL = '/users/login/'
LOGIN_REDIRECT_URL = '/'

# allauth
SITE_ID = 1

ACCOUNT_USER_MODEL_USERNAME_FIELD = None
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_USERNAME_REQUIRED = False
ACCOUNT_AUTHENTICATION_METHOD = 'email'

if PRODUCTION_ENV:
    # for the online heroku site
    SOCIALACCOUNT_PROVIDERS = {
        'github': {
            # For each OAuth based provider, either add a ``SocialApp``
            # (``socialaccount`` app) containing the required client
            # credentials, or list them here:
            'APP': {
                'client_id': '99d72dbdef3baa6cfd3e',
                'secret': '7009cba471ef5105ab7f1ba839fa3c2d43f66173',
                'key': '',
            },
            'SCOPE': [
                'user',
                'repo',
                'read:org',
            ],
        }
    }
else:
    # for local testing via 'python manage.py runserver'
    SOCIALACCOUNT_PROVIDERS = {
        'github': {
            # For each OAuth based provider, either add a ``SocialApp``
            # (``socialaccount`` app) containing the required client
            # credentials, or list them here:
            'APP': {
                'client_id': '93f8c4506cfd09ff7b95',
                'secret': 'eed3d61ddfefc3533ad36a4695ad12e870b33bd2',
                'key': '',
            },
            'SCOPE': [
                'user',
                'repo',
                'read:org',
            ],
        }
    }

